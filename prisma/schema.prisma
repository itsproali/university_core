generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  title                 String
  year                  String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  semesterRegistrations SemesterRegistration[]
  students              Student?

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String              @id @default(uuid())
  title               String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  academicDepartments AcademicDepartment?
  faculties           Faculty?
  students            Student?

  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  academicFacultyId String          @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  faculties         Faculty?
  students          Student?
  offeredCourses    OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id                   String             @id @default(uuid())
  studentId            String             @unique
  firstName            String
  middleName           String?
  lastName             String
  profileImage         String?
  email                String?
  contactNo            String?
  gender               String
  bloodGroup           String
  presentAddress       String
  permanentAddress     String
  academicSemesterId   String             @unique
  academicFacultyId    String             @unique
  academicDepartmentId String             @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])

  @@map("students")
}

model Faculty {
  id                   String             @id @default(uuid())
  facultyId            String             @unique
  firstName            String
  middleName           String?
  lastName             String
  profileImage         String?
  email                String?
  contactNo            String?
  gender               String
  bloodGroup           String
  designation          String
  academicFacultyId    String             @unique
  academicDepartmentId String             @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  courses              CourseFaculty[]
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  buildingId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  building   Building @relation(fields: [buildingId], references: [id])

  @@map("rooms")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequisite    CourseToPreRequisite[] @relation("CourseToPreRequisite")
  preRequisiteFor CourseToPreRequisite[] @relation("PreRequisiteToCourse")
  faculties       CourseFaculty[]
  offeredCourses  OfferedCourse[]

  @@map("courses")
}

model CourseToPreRequisite {
  courseId       String
  preRequisiteId String
  course         Course @relation("CourseToPreRequisite", fields: [courseId], references: [id])
  preRequisite   Course @relation("PreRequisiteToCourse", fields: [preRequisiteId], references: [id])

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId  String
  facultyId String
  course    Course  @relation(fields: [courseId], references: [id])
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                    String                      @id @default(uuid())
  startDate             DateTime
  endDate               DateTime
  status                SemesterRegistrationStatus? @default(UPCOMING)
  minCredit             Int                         @default(0)
  maxCredit             Int                         @default(0)
  createdAt             DateTime                    @default(now())
  updateAt              DateTime                    @updatedAt
  academicSemesterId    String
  academicSemester      AcademicSemester            @relation(fields: [academicSemesterId], references: [id])
  offeredCourses        OfferedCourse[]
  offeredCourseSections OfferedCourseSection[]

  @@map("semester_registrations")
}

model OfferedCourse {
  id String @id @default(uuid())

  academicDepartmentId   String
  academicDepartment     AcademicDepartment     @relation(fields: [academicDepartmentId], references: [id])
  courseId               String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  course                 Course                 @relation(fields: [courseId], references: [id])
  semesterRegistrationId String
  offeredCourseSections  OfferedCourseSection[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String               @id @default(uuid())
  title                    String
  maxCapacity              Int                  @default(0)
  currentlyEnrolledStudent Int                  @default(0)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  semesterRegistrationId   String
  semesterRegistration     SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseId          String
  offeredCourse            OfferedCourse        @relation(fields: [offeredCourseId], references: [id])

  @@map("offered_course_sections")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
