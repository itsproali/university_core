// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------- Academic Semester ---------------------------
model AcademicSemester {
  id         String    @id @default(uuid())
  title      String
  year       String
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  students   Student[]

  @@map("academic_semesters")
}

// --------------------------- Academic Faculty ---------------------------
model AcademicFaculty {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculties")
}

// --------------------------- Academic Department ---------------------------
model AcademicDepartment {
  id                String   @id @default(uuid())
  title             String
  academicFacultyId String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students        Student[]
  faculties       Faculty[]

  @@map("academic_departments")
}

// --------------------------- Student ---------------------------
model Student {
  id                   String   @id @default(uuid())
  studentId            String   @unique
  firstName            String
  middleName           String?
  lastName             String
  profileImage         String?
  email                String?
  contactNo            String?
  gender               String
  bloodGroup           String
  presentAddress       String
  permanentAddress     String
  academicSemesterId   String   @unique
  academicFacultyId    String   @unique
  academicDepartmentId String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  academicSemester   AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicFaculty    AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  @@map("students")
}

// --------------------------- Faculty ---------------------------
model Faculty {
  id                   String   @id @default(uuid())
  facultyId            String   @unique
  firstName            String
  middleName           String?
  lastName             String
  profileImage         String?
  email                String?
  contactNo            String?
  gender               String
  bloodGroup           String
  designation          String
  academicFacultyId    String   @unique
  academicDepartmentId String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  academicFaculty    AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  courses            CourseFaculty[]

  @@map("faculties")
}

// --------------------------- Building ---------------------------
model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

// --------------------------- Room ---------------------------
model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  buildingId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  building Building @relation(fields: [buildingId], references: [id])

  @@map("rooms")
}

// --------------------------- Course ---------------------------
model Course {
  id      String @id @default(uuid())
  title   String
  code    String
  credits Int    @default(0)

  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequisite    CourseToPreRequisite[] @relation("CourseToPreRequisite")
  preRequisiteFor CourseToPreRequisite[] @relation("PreRequisiteToCourse")
  faculties       CourseFaculty[]

  @@map("courses")
}

model CourseToPreRequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPreRequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PreRequisiteToCourse")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId  String
  facultyId String

  course  Course  @relation(fields: [courseId], references: [id])
  faculty Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}
